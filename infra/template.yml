Parameters:
  LambdaRuntime:
    Description: Versao do Python utilizado na Lambda
    Type: String
    Default: python3.13
  ProjectName:
    Description: Nome do projeto
    Type: String
    Default: OpenWeather
  Latitude:
    Description: Latitude
    Type: String
  Longitude:
    Description: Longitude
    Type: String
  ApiKey:
    Description: Latitude
    Type: String
  BucketName:
    Description: Latitude
    Type: String
Resources:
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: trigger-lambda-api-openweather
      Description: Scheduler responsavel por acionar a lambda que acessa a API da
        OpenWeather
      ScheduleExpression: rate(60 minutes)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt Function.Arn
        RoleArn: !GetAtt Role.Arn
      State: ENABLED
  Role:
    Type: AWS::IAM::Role
    Properties:
      Description: Role da lambda responsavel por acessar a API da OpenWeather
      RoleName: role-lambda-api-openweather
      Tags:
        - Key: project
          Value: !Ref ProjectName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: policy-lambda-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: lambda-api-openweather
      Description: Lambda responsavel por coletar as informacoes via API da OpenWeather
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          
          import requests
          import pandas as pd
          import boto3
          import json
          import os
          from datetime import datetime

          LAT = os.getenv("LATITUDE")
          LON = os.getenv("LONGITUDE")
          API_KEY = os.getenv("API_KEY")

          def create_df(data):
            date = datetime.fromtimestamp(data["dt"])
            print(f"Data e hora da medi??o: {date}")

            data_df = {
              "weather_id": data["weather"][0]["id"],
              "weather_main" : data["weather"][0]["main"],
              "temp" : data["main"]["temp"],
              "temp_feels_like" : data["main"]["feels_like"],
              "temp_min" : data["main"]["temp_min"],
              "temp_max" : data["main"]["temp_max"],
              "pressure" : data["main"]["pressure"],
              "humidity" : data["main"]["humidity"],
              "wind_speed" : data["wind"]["speed"],
              "wind_deg" : data["wind"]["deg"],
              "clouds_all" : data["clouds"]["all"],
              "year" : date.year,
              "month" : date.month,
              "day" : date.day,
              "hour" : date.hour,
              "day_duration": data["sys"]["sunset"] - data["sys"]["sunrise"]
            }

            df = pd.DataFrame([data_df])
            print(df)
            return df

          def create_s3_object(df):
            s3 = boto3.client('s3')

            year = df["year"].iloc[0]
            month = df["month"].iloc[0]
            day = df["day"].iloc[0]
            hour = df["hour"].iloc[0]
            print(f"Data e hora da medi??o: {year}-{month}-{day} {hour}:00:00")
            bucket_name = os.getenv("BUCKET_NAME")
            file_path = "/tmp/weather_data.parquet"
            object_name = f"weather_data/raw/{year}{month}{day}{hour}.parquet"

            df.to_parquet(f"/tmp/weather_data.parquet", index=False, engine='pyarrow')

            try:
              s3.upload_file(file_path, bucket_name, object_name)
              print(f"Arquivo {object_name} enviado com sucesso para o bucket {bucket_name}.")
            except Exception as e:
              print(f"Erro ao enviar o arquivo: {e}")

          def lambda_handler(event, context):

              api_url = f"https://api.openweathermap.org/data/2.5/weather?lat={LAT}&lon={LON}"
              params = {
                  "appid": API_KEY,
                  "units": "metric",  # temperatura em graus C
                  "lang": "pt"        # descricao em portugues
              }

              try:
                  response = requests.get(api_url, params=params)
                  data = response.json()

                  print("Requisicao bem-sucedida. Dados recebidos:")
                  df = create_df(data)
                  create_s3_object(df)
              except Exception as exception:
                  print("Erro ao fazer a requisicao:", exception)
                  return {
                  "statusCode": 500,
                  "body": json.dumps({"error": "Erro ao fazer a requisicao"})
                  }

              return {
                "statusCode": 200,
                "body": json.dumps({"success": "Execucao realizada com sucesso"})
                }
      Role: !GetAtt Role.Arn
      Timeout: 600
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python313:4
        - arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-x86_64:19
      Environment:
        Variables:
          LATITUDE: !Ref Latitude
          LONGITUDE: !Ref Longitude
          API_KEY: !Ref ApiKey
          BUCKET_NAME: !Ref BucketName
      Tags:
        - Key: project
          Value: !Ref ProjectName